{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/volk401/Deep-learning/blob/main/LR1\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Лабораторная работа №1"
      ],
      "metadata": {
        "id": "HsvLg8M8ebUX"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VrOocc6D_O7M"
      },
      "source": [
        "# Задание\n",
        "\n",
        "Необходимо познакомиться с фреймворком машинного обучения PyTorch и выполнить три задания:\n",
        "1. Регрессия по теореме универсальной аппроксимации, ручное дифференцирование\n",
        "2. Бинарная классификация с помощью автодиффиренцирования PyTorch\n",
        "3. Обучить полносвязную нейронную сеть классификации 3 классов изображений из набора данных CIFAR100 по варианту с точностью на тестовой выборке не менее 70%.\n",
        "\n",
        "Для задания 3 нужно сформировать свою подвыборку CIFAR100 по варианту.\n",
        "\n",
        "Лабораторные выполняются на платформе Google Colab - просто перейдите по ссылки в начале ноутбука. Также можно работать с ноубуками лабораторных локально.\n",
        "\n",
        "Отчет должен содержать: титульный лист, задание с вариантом, скриншоты и краткие пояснения по каждому этапу лабораторной работы."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Варианты для Задания 3\n",
        "Вы должны использовать следующие классы из CIFAR100:\n",
        "1. Номер группы + 4\n",
        "2. Номер варианта + 17\n",
        "3. Номер варианта + 42"
      ],
      "metadata": {
        "id": "fpq20OpJhje4"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Контрольные вопросы\n",
        "1. Что такое функция потерь\n",
        "2. Что такое оптимизатор\n",
        "3. Что такое активационная функция\n",
        "4. Полносвязная нейронная сеть\n",
        "5. Количество нейронов связей и весов в полносвязной нейронной сети\n",
        "6. Что такое эпоха, итерация, батч обучения\n",
        "7. Что такое тестовая, обучающая выборка\n",
        "8. Как устроен набор данных, какие в нем данные и их количество\n",
        "9. Что такое PyTorch\n",
        "10. Обучение с учителем\n",
        "11. Задачи регрессии и классификации"
      ],
      "metadata": {
        "id": "UNO1xJtZdf37"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FDgKl3yGd-W_"
      },
      "source": [
        "### Методы и функции PyTorch\n",
        "\n",
        "(Документация: https://pytorch.org/docs/stable/index.html)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IKXfCiiWf2MK"
      },
      "source": [
        "Библиотеки:\n",
        "\n",
        "* __np__ - библиотека NumPy для работы с многомерными массивами данных\n",
        "* __pickle__ - библиотека Pickle для сериализации и десериализации структур данных ЯП Python\n",
        "* __sklearn__ - библиотека, реализующая в основном методы классического машинного обучения и инструменты для работы с ними\n",
        "* __PIL__ - легковесная библиотека Pillow для работы с изображениями и вывода графических элементов напрямую в Jupyter Notebook\n",
        "* __matplotlib__ - библиотека для построения графиков, по большей части повторяет API Matlab'a\n",
        "* __torch__ - библиотека Pytorch для глубокого обучения нейронных сетей"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MMmc6jvid-XB"
      },
      "source": [
        "__Принятые сокращения__: \n",
        "* torch.nn - nn\n",
        "* torch.nn.functional - F\n",
        "* torch.optim - optim\n",
        "\n",
        "__Методы__:\n",
        "* __torch.Tensor__ - cоздает тензор из многомерного массива Numpy и наследует его тип данных. По умолчанию память под тензоры выделяется на CPU. При выставлении флага __requires_grad__ автоматически отслеживает градиенты с помощью движка autograd, который строит динамический вычислительный граф. Включить отслеживания тензора __t__ можно так же при помощи метода __t.requires_grad_(True)__. В таком случае после вызова метода __backward__, в поле __grad__ будут записаны производные. Производные тензора __t__ можно очистить вызовом метода __t.grad.zero_()__. Для того чтобы отсечь ненужные вычисления производных используется метод __detach__, который создаёт копию тензора, при этом флаг __requires_grad__ снимается и отслеживание движком autograd прекращается.\n",
        "\n",
        "* __torch.numpy__ - создает многомерный NumPy массив данных из тензора\n",
        "\n",
        "* __torch.item__ - возвращает число, но только если ранг тензора 0. В противном случае выдаёт ошибку и следует использовать torch.numpy\n",
        "\n",
        "* __torch.uint8__, __torch.int16__, __torch.int64__, __torch.float32__ - приведение массива к новому типу, аналогично NumPy. Для приведения используется метод .to (например `t.to(torch.int64)`). По умолчанию все вычисления на графе производятся в float64, есть также возможность использования mixed precision (что-то во float16, что-то во float64), но это считается продвинутой техникой.\n",
        "\n",
        "* __torch.ones__, __torch.zeros__, __torch.transpose__, __torch.reshape__ - API похожий, как у NumPy\n",
        "\n",
        "* __torch.rand__ - создание случайного тензора с числами в диапазоне от 0 до 1. Размерность перечисляется через запятую\n",
        "\n",
        "* __torch.t__ - транспонирование тензора, похоже на рассмотренный ранее __numpy.transpose__. Если дан тензор X, то можно его транспонировать при помощи `X.t()` \n",
        "\n",
        "* __torch.sum__ - суммирование элементов тензора вдоль указанной оси __axis__. Если суммирование производится вдоль последней оси, то разрешается указать вместо номера -1. Для сохранения исходной размерности тензора, необходимо выставить флаг __keepdims__.\n",
        "\n",
        "* __torch.maximum__ - производит поэлементное сравнение тензоров и возвращает максимальный из элементов. На практике используется для реализации некоторых функций активации нейронной сети\n",
        "\n",
        "* __torch.mm__ - произведение тензоров. Для 2 двухмерных матриц с размерностями (M, N) и (N, K) результатом данного метода будет двухмерная матрица размерностью (M, K)\n",
        "\n",
        "* __torch.exp__ - повторяет функционал __numpy.exp__ - поэлементное возведение тензора в степень экспоненты\n",
        "\n",
        "* __torch.log__ - поэлементная операция логарифмирования тензора - взятие натурального логарифма, обратная операция потенциирования\n",
        "\n",
        "* __torch.flatten__ - аналогично NumPy .reshape(-1), если указан параметр start_dim, то начинает \"выпрямление\" массива начиная с указанного номера. Т.е. для того, чтобы перевести тензор t с формой (100, 32, 32, 3) в форму (100, 3072) достаточно написать `torch.flatten(t, start_dim=1)`\n",
        "\n",
        "* __F.one_hot__ - один из многих способов получить горячую кодировку класса в виде PyTorch тензора. Например, для 5 классов, горячая кодировка класса \"4\" будет [0, 0, 0, 1, 0]\n",
        "\n",
        "* __torch.utils.data.TensorDataset__ - создание связанных тензоров, например обучающих примеров и соответствующих меток. В качестве аргумента передаются тензоры. Приемлемый способ создания набора данных, когда обучающая выборка некрупная и полностью помещается в оперативной памяти.\n",
        "\n",
        "* __torch.utils.data.DataLoader__ - В основе утилиты загрузки данных PyTorch лежит класс DataLoader. Он представляет собой Python объект, повторяющийся по набору данных, с поддержкой набора данных в стиле map и итератора; настройки порядка загрузки данных; автоматического разбиения на минибатчи;загрузки данных в один и несколько процессов/потоков. Самые полезные аргументы в конструкторе - размер мини-батча __batch_size__ и число параллельных процессов __num_workers__. Чтобы перемешать данные (для лучшей сходимости), следует выставить флаг __shuffle__ в True\n",
        "\n",
        "* __torch.save__ - сохранение параметров модели на постоянный носитель информации. Для этого первым аргументом передаётся model.state_dict(), где model - обученная нейросетевая модель, а вторым аргументов передаётся путь с именем файла.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mM59NsM-d-XC"
      },
      "source": [
        "__Создание моделей__:\n",
        "\n",
        "Создание моделей осуществляется при помощи модуля nn, при этом в модуле уже реализованы самые популярные блоки нейронных сетей или слои, такие как: \n",
        "* полносвязный слов Linear\n",
        "* свёрточный слой Conv2d\n",
        "* пуллинг MaxPool2d\n",
        "* нормализация BatchNorm2d\n",
        "* множество активационных функций ReLU, Softmax, Tanh\n",
        "* слои-регуляризаторы, например Dropout\n",
        "\n",
        "В данной лабораторной работе мы рассмотрим лишь 2 блока-кирпичика нейронной сети из выше приведённого списка, а именно Linear и ReLU.\n",
        "\n",
        "Задать модель можно 2 способам: \n",
        "\n",
        "1. при помощи nn.Sequential\n",
        "2. при помощи наследования от класса nn.Module\n",
        "\n",
        "Первый способ подходит для создания простых моделей без ответвлений. По сути их можно представить как конвейер, где входной тензор передается ряду последовательно приведённых трансформаций для получения выходного тензора.\n",
        "\n",
        "Если необходимо применять более сложные архитектуры, где конвейерные дорожки могут разветвляться на несколько частей, то используется nn.Module. Данный подход позволяет реализовать самые разные архитектуры.\n",
        "\n",
        "Для создания простого многослойного перцептрона с одним скрытым слоем и функцией нелинейности, согласно первому способу достаточно написать следующий код:\n",
        "\n",
        "    model = nn.Sequential(\n",
        "      nn.Linear(input_dims, hidden_dims),\n",
        "      nn.ReLU(),\n",
        "      nn.Linear(hidden_dims, num_classes) \n",
        "    )\n",
        "\n",
        "Для создания простого многослойного перцептрона с одним скрытым слоем и функцией нелинейности, согласно второму способу необходимо создать класс и модель как экземпляр этого класса:\n",
        "\n",
        "    class MLP(nn.Module):\n",
        "        def __init__(self, input_dims, hidden_dims, num_classes,\n",
        "                     *args, **kwargs):\n",
        "            super(MLP, self).__init__()\n",
        "            self.fc1 = Linear(input_dims, hidden_dims)\n",
        "            self.fc2 = Linear(hidden_dims, num_classes)\n",
        "        \n",
        "        def forward(self, input):\n",
        "             x = self.fc1(input)\n",
        "             x = F.relu(x)\n",
        "             x = self.fc2(x)\n",
        "             return x\n",
        "    \n",
        "    model = MLP(input_dims, hidden_dims, num_classes) \n",
        "\n",
        "При этом допускается вкладывать nn.Module и nn.Sequential внутри других модулей, что позволяет создавать очень сложные архитектуры моделей.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FmxEqwWLd-XD"
      },
      "source": [
        "__Обучение моделей__:\n",
        "\n",
        "Перед обучением моделей необходимо выбрать функцию потерь и оптимизатор. Различные функции потерь представлены также в модуле nn:\n",
        "* __nn.MSELoss__ - среднеквадратическая ошибка (y_true-y_pred)**2\n",
        "* __nn.BCEWithLogitsLoss__ - бинарная перекрёстная энтропия для задач бинарной классификации\n",
        "* __nn.CrossEntropyLoss__ - категориальная перекрёстная энтропия для задач многоклассовой классификации\n",
        "\n",
        "В качестве альтернативы можно собственноручно реализовать функцию потерь, например для MSELoss:\n",
        "\n",
        "    inputs, y = batch\n",
        "    ...\n",
        "    output = model(inputs)\n",
        "    loss = ((output - y)**2).sum()\n",
        "    ...\n",
        "\n",
        "Оптимизаторы содержатся в модуле __torch.optim__. Существует множество оптимизаторов целевой функции, классическим является стохастический градиентный спуск Stochastic Gradient Descent или SGD. В конструктор класса необходимо передать веса модели, а также указать шаг обучения или learning rate. \n",
        "\n",
        "Для перевода модели в состояние обучения необходимо вызвать метод __train__. После чего модель готова для обучения.\n",
        "\n",
        "Для обучения нейросетевых моделей используется градиентный спуск и его разновидности, в основе которых лежит метод последовательных приближений. \n",
        "\n",
        "За одну эпоху условно выбирают прохождение итератора через весь набор данных, за одну итерацию - оптимизация параметров модели с помощью текущего мини-батча. PyTorch автоматически считает производные при вызове метода __backward__, применённому к функции потерь. \n",
        "\n",
        "При этом при повторном вызове, значения новых градиентов добавятся к предыдущим расчитанным. Поэтому, для избежания нежелательных эффектов принято очищать прошлые значения градиентов на каждой итерации при помощи метода __zero_grad__, применённого к экземпляру класса оптимизатора.\n",
        "\n",
        "Для обновления параметров нейронной сети используется метод __step__, применённый к экземпляру класса оптимизатора."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oJ2fTXUPd-XD"
      },
      "source": [
        "__Проверка качества моделей__:\n",
        "\n",
        "Для перевода модели в состояние проверки необходимо вызвать метод __eval__. После чего модель готова для проверки.\n",
        "\n",
        "Выходной тензор предсказаний модели необходимо отсечь от вычислительного графа. Для этого используется метод __detach__, применённый к выходному тензору модели. В противном случае возможны утечки памяти. Метод __numpy__ конвертирует тензор в многомерный массив NumPy.\n",
        "\n",
        "По умолчанию модель выводит так называемые логиты классов, а не их вероятности. Для получения вероятностей необходимо применить функцию активации __Softmax__. Однако на практике это необязательно, поскольку величина логитов согласуется с вероятностью классов, и для получения номера наиболее вероятного класса этот этап можно опустить. Номер класса получается при помощи либо метода __argmax__, либо метода __argsort__, причём последний позволяет считать такие метрики, как Accuracy@5 и метрики ранжирования.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fzjC1ECbdj-Z"
      },
      "source": [
        "## Импортирование необходимых библиотек"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "3O2PElov-nod"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import torch\n",
        "import torch.optim as optim\n",
        "import torch.nn as nn\n",
        "import torch.nn.functional as F\n",
        "from torch.utils.data import TensorDataset, DataLoader\n",
        "import pickle\n",
        "from sklearn.metrics import classification_report\n",
        "from sklearn.datasets import make_circles, make_moons\n",
        "from PIL import Image\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CTpTR1x0YYdn"
      },
      "source": [
        "# Часть 1. Задача регрессии по теореме универсальной аппроксимации, ручное дифференцирование"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sqpCNuNKufbZ"
      },
      "source": [
        "## Генерация выборки и инициализация параметров нейронной сети"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 267
        },
        "id": "ity2_RGkYX8S",
        "outputId": "f4b4f89c-732e-4d4a-f32d-aa8f5f9dc168"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "X = (np.arange(100)/100 - 0.5).repeat(5)\n",
        "\n",
        "y = 1/(1+np.exp(-10*X))\n",
        "yn = np.random.normal(scale=0.05, size=y.size)+y\n",
        "\n",
        "plt.plot(X, yn)\n",
        "plt.plot(X, y, linestyle='--', c='k')\n",
        "################################################\n",
        "tensor_X = torch.Tensor(X.reshape(-1, 1))\n",
        "tensor_y = torch.Tensor(yn.reshape(-1, 1))\n",
        "\n",
        "HIDDEN_SIZE = 64\n",
        "# Инициализация весов MLP с одним скрытым слоём\n",
        "weights_1 = (torch.rand(1, HIDDEN_SIZE)-.5)/10\n",
        "bias_1 = torch.zeros(HIDDEN_SIZE)\n",
        "\n",
        "weights_2 = (torch.rand(HIDDEN_SIZE, 1)-.5)/10\n",
        "bias_2 = torch.zeros(1)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1UZe3zl6uj7J"
      },
      "source": [
        "## Обучение нейронной сети задачи регрессии"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "LFZI-IamaceN",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "outputId": "bd00cd86-4111-4a05-ab3a-7719f0d0d63c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.002827759\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# Определяем функцию нелинейности\n",
        "relu = lambda x: torch.maximum(x, torch.Tensor([0]))\n",
        "# Прямой проход\n",
        "forward = lambda x: (weights_2.t()*relu((weights_1*x) + bias_1) # bias нужен чтобы реагировать на пустоту\n",
        "                      ).sum(axis=-1,keepdims=True) + bias_2\n",
        "loss = lambda y, y_: ((y-y_)**2).sum(axis=-1)\n",
        "\n",
        "# # обратный проход\n",
        "def backward(X, y, y_pred):\n",
        "    # производная функции потерь по y_pred\n",
        "    dL = 2*(y_pred-y)\n",
        "    # значения нейронов скрытого слоя до применения активации\n",
        "    Ax = (weights_1*X) + bias_1\n",
        "    # значения нейронов скрытого слоя после применения активации\n",
        "    A = relu(Ax)\n",
        "    # производная функции потерь по weight_2\n",
        "    dW2 = torch.mm(A.t(), dL)\n",
        "    # производная функции потерь по bias_2\n",
        "    db2 = dL.sum(axis=0)\n",
        "    # производная функции потерь по значениям скрытого слоя после активации\n",
        "    dA = torch.mm(dL, weights_2.t())\n",
        "    # производная функции потерь по значениям скрытого слоя до активации\n",
        "    dA[Ax<=0] = 0\n",
        "    # производная функции потерь по weight_1\n",
        "    dW = torch.mm(X.t(), dA)\n",
        "    # производная функции потерь по bias_1\n",
        "    db = dA.sum(axis=0)\n",
        "    #print(dW.shape, db.shape, dW2.shape, db2.shape)\n",
        "    return dW, db, dW2, db2\n",
        "\n",
        "def optimize(params, grads, lr=0.001):\n",
        "    # градиентный спуск по всей обучающей выборке\n",
        "    W1, b1, W2, b2 = params\n",
        "    W1 -= lr*grads[0]\n",
        "    W2 -= lr*grads[2]\n",
        "    b1 -= lr*grads[1]\n",
        "    b2 -= lr*grads[3]\n",
        "    return W1, b1, W2, b2\n",
        "\n",
        "for i in range(50000): # 50 тысяч итераций градиентного спуска == 50 тысяч эпох\n",
        "  output = forward(tensor_X)\n",
        "  cur_loss = loss(output, tensor_y)\n",
        "  grads = backward(tensor_X, tensor_y, output)\n",
        "  params = [weights_1, bias_1, weights_2, bias_2]\n",
        "  weights_1, bias_1, weights_2, bias_2 = optimize(params, grads, 1e-4)\n",
        "  if (i+1)%10000 == 0:\n",
        "      plt.plot(X, output.numpy(), label=str(i+1), alpha=0.5)\n",
        "plt.plot(X, y, linestyle='--', c='k', label='real')\n",
        "plt.legend()\n",
        "plt.ylim(y.min(), y.max())\n",
        "print(cur_loss.numpy().mean())"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qq1r9u6hSucR"
      },
      "source": [
        "# Часть 2. Бинарная классификация с помощью автодиффиренцирования PyTorch"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z_96UjOJuOPs"
      },
      "source": [
        "## Генерация выборки и инициализация параметров нейронной сети"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 265
        },
        "id": "fNVT1K3IS33Y",
        "outputId": "6b462912-c3da-48fd-cf25-4272dfd55ce1"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "X = np.random.randint(2, size=(1000, 2))\n",
        "\n",
        "y = (X[:, 0] + X[:, 1]) % 2 # XOR\n",
        "X = X + np.random.normal(0, scale=0.1, size=X.shape)\n",
        "#X, y = make_circles(n_samples=1000, noise=0.025)\n",
        "#X, y = make_moons(n_samples=1000, noise=0.025)\n",
        "plt.scatter(X[:, 0], X[:, 1], c=y)\n",
        "####################################################\n",
        "tensor_X = torch.Tensor(X.reshape(-1, 2))\n",
        "tensor_y = torch.Tensor(y.reshape(-1, 1))\n",
        "\n",
        "HIDDEN_SIZE = 16\n",
        "# Инициализация весов MLP с одним скрытым слоём\n",
        "weights_1 = ((torch.rand(2, HIDDEN_SIZE)-.5)/10).detach().requires_grad_(True)\n",
        "bias_1 = torch.zeros(HIDDEN_SIZE, requires_grad=True)\n",
        "\n",
        "weights_2 = ((torch.rand(HIDDEN_SIZE, 1)-.5)/10).detach().requires_grad_(True)\n",
        "bias_2 = torch.zeros(1, requires_grad=True)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YSKqixxWuTb8"
      },
      "source": [
        "## Обучение нейронной сети задачи классификации"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "XioBMI-KW1qx",
        "outputId": "f68220a6-d670-4539-e940-ec187d721e4b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7f19c6c04280>]"
            ]
          },
          "metadata": {},
          "execution_count": 5
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "# Определяем функцию нелинейности\n",
        "def sigmoid(x):\n",
        "    return 1/(1+torch.exp(-x))\n",
        "\n",
        "# Прямой проход\n",
        "def forward(x):\n",
        "    hidden = torch.mm(x, weights_1) + bias_1\n",
        "    hidden_nonlin = sigmoid(hidden)\n",
        "    output = (weights_2.t()*hidden_nonlin).sum(axis=-1,keepdims=True) + bias_2\n",
        "    return sigmoid(output)\n",
        "                       \n",
        "# Logloss\n",
        "def loss(y_true, y_pred):\n",
        "    return -1*(y_true*torch.log(y_pred)+(1-y_true)*torch.log(1-y_pred)).sum() # crossentropy\n",
        "\n",
        "# задаём шаг обучения\n",
        "lr = 1e-3\n",
        "# задаём число итераций\n",
        "iters = 10000\n",
        "params = [weights_1, bias_1, weights_2, bias_2]\n",
        "losses = []\n",
        "for i in range(iters):\n",
        "    output = forward(tensor_X)\n",
        "    lossval = loss(tensor_y, output)\n",
        "    lossval.backward() # тут включается в работу autograd\n",
        "    for w in params:\n",
        "        with torch.no_grad():\n",
        "            w -= w.grad*lr # обновляем веса\n",
        "        w.grad.zero_() # зануляем градиенты, чтобы не накапливались за итерации\n",
        "    losses.append(lossval.item())\n",
        "# выводим историю функции потерь по итерациям\n",
        "plt.plot(losses)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pghpgU0WuXCS"
      },
      "source": [
        "## Проверка результатов обучения"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 282
        },
        "id": "qMNBdwBOikFj",
        "outputId": "cea09342-6a69-42c2-cd28-7b1f664fc659"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(-0.5245109629460764, 1.564697610905943)"
            ]
          },
          "metadata": {},
          "execution_count": 6
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "X_diff = X.max() - X.min()\n",
        "X_left = X.min() - 0.1*X_diff\n",
        "X_right = X.max() + 0.1*X_diff\n",
        "grid = np.arange(X_left, X_right, 0.01)\n",
        "grid_width = grid.size\n",
        "surface = []\n",
        "# создаем точки по сетке\n",
        "for x1 in grid:\n",
        "    for x2 in grid:\n",
        "        surface.append((x1, x2))\n",
        "surface = np.array(surface)\n",
        "# получаем предсказания для всех точек\n",
        "with torch.no_grad():\n",
        "    Z = forward(torch.Tensor(surface)).detach().numpy()\n",
        "# меняем форму в виде двухмерного массива\n",
        "Z = Z.reshape(grid_width, grid_width)\n",
        "xx = surface[:, 0].reshape(grid_width, grid_width)\n",
        "yy = surface[:, 1].reshape(grid_width, grid_width)\n",
        "# рисуем разделяющие поверхности классов\n",
        "plt.contourf(xx, yy, Z, alpha=0.5)\n",
        "# рисуем обучающую выборку\n",
        "plt.scatter(X[:, 0], X[:, 1], c=output.detach().numpy()>0.5)\n",
        "# задаём границы отображения графика\n",
        "plt.xlim(X_left, X_right)\n",
        "plt.ylim(X_left, X_right)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OF4X4J8_YlLo"
      },
      "source": [
        "# Часть 3. Классификация изображений CIFAR100"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4zoT9OgeY7cZ"
      },
      "source": [
        "## Загрузка и распаковка набора данных CIFAR100"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QDPzQmviB8IT",
        "outputId": "9be9dfd0-1b86-4f86-c32e-21b67037e94d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "--2023-03-10 10:57:33--  https://www.cs.toronto.edu/~kriz/cifar-100-python.tar.gz\n",
            "Resolving www.cs.toronto.edu (www.cs.toronto.edu)... 128.100.3.30\n",
            "Connecting to www.cs.toronto.edu (www.cs.toronto.edu)|128.100.3.30|:443... connected.\n",
            "HTTP request sent, awaiting response... 200 OK\n",
            "Length: 169001437 (161M) [application/x-gzip]\n",
            "Saving to: ‘cifar-100-python.tar.gz’\n",
            "\n",
            "cifar-100-python.ta 100%[===================>] 161.17M  28.6MB/s    in 5.0s    \n",
            "\n",
            "2023-03-10 10:57:39 (31.9 MB/s) - ‘cifar-100-python.tar.gz’ saved [169001437/169001437]\n",
            "\n",
            "cifar-100-python/\n",
            "cifar-100-python/file.txt~\n",
            "cifar-100-python/train\n",
            "cifar-100-python/test\n",
            "cifar-100-python/meta\n"
          ]
        }
      ],
      "source": [
        "!wget https://www.cs.toronto.edu/~kriz/cifar-100-python.tar.gz\n",
        "!tar -xvzf cifar-100-python.tar.gz"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mtz5rqMlZD2x"
      },
      "source": [
        "## Чтение тренировочной и тестовой выборки"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 273
        },
        "id": "49KAR3NoDbEp",
        "outputId": "989f230f-6558-40bc-9ec7-dd9400796980"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<PIL.Image.Image image mode=RGB size=256x256 at 0x7F19C653C2B0>"
            ],
            "image/png": "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\n"
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "with open('cifar-100-python/train', 'rb') as f:\n",
        "    data_train = pickle.load(f, encoding='latin1')\n",
        "with open('cifar-100-python/test', 'rb') as f:\n",
        "    data_test = pickle.load(f, encoding='latin1')\n",
        "\n",
        "# Здесь указать ваши классы по варианту!!!\n",
        "CLASSES = [1+4, 13+17, 13+42] # 5, 30, 55\n",
        "\n",
        "train_X = data_train['data'].reshape(-1, 3, 32, 32)\n",
        "train_X = np.transpose(train_X, [0, 2, 3, 1]) # NCHW -> NHWC\n",
        "train_y = np.array(data_train['fine_labels'])\n",
        "mask = np.isin(train_y, CLASSES)\n",
        "train_X = train_X[mask].copy()\n",
        "train_y = train_y[mask].copy()\n",
        "train_y = np.unique(train_y, return_inverse=1)[1]\n",
        "del data_train\n",
        "\n",
        "test_X = data_test['data'].reshape(-1, 3, 32, 32)\n",
        "test_X = np.transpose(test_X, [0, 2, 3, 1])\n",
        "test_y = np.array(data_test['fine_labels'])\n",
        "mask = np.isin(test_y, CLASSES)\n",
        "test_X = test_X[mask].copy()\n",
        "test_y = test_y[mask].copy()\n",
        "test_y = np.unique(test_y, return_inverse=1)[1]\n",
        "del data_test\n",
        "Image.fromarray(train_X[50]).resize((256,256))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VJHI8GhtZO8F"
      },
      "source": [
        "## Создание Pytorch DataLoader'a"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a77Fex1TIhGE",
        "outputId": "36290ca5-a967-46ef-e5c4-b64faefec6f2"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'train': <torch.utils.data.dataloader.DataLoader at 0x7f19c67b94f0>,\n",
              " 'test': <torch.utils.data.dataloader.DataLoader at 0x7f19c6502d90>}"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "batch_size = 256\n",
        "dataloader = {}\n",
        "for (X, y), part in zip([(train_X, train_y), (test_X, test_y)],\n",
        "                        ['train', 'test']):\n",
        "    tensor_x = torch.Tensor(X)\n",
        "    tensor_y = F.one_hot(torch.Tensor(y).to(torch.int64),\n",
        "                                     num_classes=len(CLASSES))/1.\n",
        "    dataset = TensorDataset(tensor_x, tensor_y) # создание объекта датасета\n",
        "    dataloader[part] = DataLoader(dataset, batch_size=batch_size, shuffle=True) # создание экземпляра класса DataLoader\n",
        "dataloader"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FxcEeFaHZV-G"
      },
      "source": [
        "## Создание Pytorch модели многослойного перцептрона с одним скрытым слоем"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jxfiec1w_bLr",
        "outputId": "2419d859-416f-4126-bc24-464aecc8b532"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Cifar100_MLP(\n",
              "  (norm): Normalize()\n",
              "  (seq): Sequential(\n",
              "    (0): Linear(in_features=3072, out_features=10, bias=True)\n",
              "    (1): ReLU()\n",
              "    (2): Linear(in_features=10, out_features=3, bias=True)\n",
              "  )\n",
              ")"
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ],
      "source": [
        "class Normalize(nn.Module):\n",
        "    def __init__(self, mean, std):\n",
        "        super(Normalize, self).__init__()\n",
        "        self.mean = torch.tensor(mean)\n",
        "        self.std = torch.tensor(std)\n",
        "\n",
        "    def forward(self, input):\n",
        "        x = input / 255.0\n",
        "        x = x - self.mean\n",
        "        x = x / self.std\n",
        "        return torch.flatten(x, start_dim=1) # nhwc -> nm\n",
        "\n",
        "class Cifar100_MLP(nn.Module):\n",
        "    def __init__(self, hidden_size=32, classes=100):\n",
        "        super(Cifar100_MLP, self).__init__()\n",
        "        # https://blog.jovian.ai/image-classification-of-cifar100-dataset-using-pytorch-8b7145242df1\n",
        "        self.norm = Normalize([0.5074,0.4867,0.4411],[0.2011,0.1987,0.2025])\n",
        "        self.seq = nn.Sequential(\n",
        "            nn.Linear(32*32*3, hidden_size),\n",
        "            nn.ReLU(),\n",
        "            nn.Linear(hidden_size, classes),\n",
        "        )\n",
        "\n",
        "    def forward(self, input):\n",
        "        x = self.norm(input)\n",
        "        return self.seq(x)\n",
        "\n",
        "HIDDEN_SIZE = 10\n",
        "model = Cifar100_MLP(hidden_size=HIDDEN_SIZE, classes=len(CLASSES))\n",
        "model"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "raKMPtc4ZgsZ"
      },
      "source": [
        "## Выбор функции потерь и оптимизатора градиентного спуска"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "-sRf5LGwHIZB"
      },
      "outputs": [],
      "source": [
        "criterion = nn.CrossEntropyLoss()\n",
        "optimizer = optim.SGD(model.parameters(), lr=0.005)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hFtkRYFQZ0xb"
      },
      "source": [
        "## Обучение модели по эпохам"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j3N4gdE9KKd1",
        "outputId": "f7146352-88d2-41eb-c3a1-dd464310d4e3"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1,     6] loss: 1.009\n",
            "[1,     2] val loss: 0.863\n",
            "[2,     6] loss: 0.879\n",
            "[2,     2] val loss: 0.838\n",
            "[3,     6] loss: 0.818\n",
            "[3,     2] val loss: 0.844\n",
            "[4,     6] loss: 0.780\n",
            "[4,     2] val loss: 0.732\n",
            "[5,     6] loss: 0.751\n",
            "[5,     2] val loss: 0.764\n",
            "[6,     6] loss: 0.725\n",
            "[6,     2] val loss: 0.809\n",
            "[7,     6] loss: 0.706\n",
            "[7,     2] val loss: 0.651\n",
            "[8,     6] loss: 0.687\n",
            "[8,     2] val loss: 0.666\n",
            "[9,     6] loss: 0.670\n",
            "[9,     2] val loss: 0.675\n",
            "[10,     6] loss: 0.656\n",
            "[10,     2] val loss: 0.715\n",
            "[11,     6] loss: 0.643\n",
            "[11,     2] val loss: 0.677\n",
            "[12,     6] loss: 0.629\n",
            "[12,     2] val loss: 0.661\n",
            "[13,     6] loss: 0.617\n",
            "[13,     2] val loss: 0.612\n",
            "[14,     6] loss: 0.608\n",
            "[14,     2] val loss: 0.631\n",
            "[15,     6] loss: 0.598\n",
            "[15,     2] val loss: 0.600\n",
            "[16,     6] loss: 0.590\n",
            "[16,     2] val loss: 0.683\n",
            "[17,     6] loss: 0.581\n",
            "[17,     2] val loss: 0.573\n",
            "[18,     6] loss: 0.571\n",
            "[18,     2] val loss: 0.609\n",
            "[19,     6] loss: 0.567\n",
            "[19,     2] val loss: 0.552\n",
            "[20,     6] loss: 0.559\n",
            "[20,     2] val loss: 0.683\n",
            "[21,     6] loss: 0.553\n",
            "[21,     2] val loss: 0.688\n",
            "[22,     6] loss: 0.547\n",
            "[22,     2] val loss: 0.682\n",
            "[23,     6] loss: 0.544\n",
            "[23,     2] val loss: 0.635\n",
            "[24,     6] loss: 0.537\n",
            "[24,     2] val loss: 0.592\n",
            "[25,     6] loss: 0.533\n",
            "[25,     2] val loss: 0.561\n",
            "[26,     6] loss: 0.529\n",
            "[26,     2] val loss: 0.682\n",
            "[27,     6] loss: 0.525\n",
            "[27,     2] val loss: 0.640\n",
            "[28,     6] loss: 0.520\n",
            "[28,     2] val loss: 0.590\n",
            "[29,     6] loss: 0.517\n",
            "[29,     2] val loss: 0.661\n",
            "[30,     6] loss: 0.515\n",
            "[30,     2] val loss: 0.531\n",
            "[31,     6] loss: 0.509\n",
            "[31,     2] val loss: 0.691\n",
            "[32,     6] loss: 0.508\n",
            "[32,     2] val loss: 0.591\n",
            "[33,     6] loss: 0.504\n",
            "[33,     2] val loss: 0.653\n",
            "[34,     6] loss: 0.500\n",
            "[34,     2] val loss: 0.670\n",
            "[35,     6] loss: 0.497\n",
            "[35,     2] val loss: 0.572\n",
            "[36,     6] loss: 0.496\n",
            "[36,     2] val loss: 0.644\n",
            "[37,     6] loss: 0.493\n",
            "[37,     2] val loss: 0.646\n",
            "[38,     6] loss: 0.490\n",
            "[38,     2] val loss: 0.654\n",
            "[39,     6] loss: 0.488\n",
            "[39,     2] val loss: 0.663\n",
            "[40,     6] loss: 0.484\n",
            "[40,     2] val loss: 0.681\n",
            "[41,     6] loss: 0.483\n",
            "[41,     2] val loss: 0.553\n",
            "[42,     6] loss: 0.478\n",
            "[42,     2] val loss: 0.670\n",
            "[43,     6] loss: 0.476\n",
            "[43,     2] val loss: 0.631\n",
            "[44,     6] loss: 0.475\n",
            "[44,     2] val loss: 0.582\n",
            "[45,     6] loss: 0.473\n",
            "[45,     2] val loss: 0.609\n",
            "[46,     6] loss: 0.468\n",
            "[46,     2] val loss: 0.641\n",
            "[47,     6] loss: 0.469\n",
            "[47,     2] val loss: 0.584\n",
            "[48,     6] loss: 0.466\n",
            "[48,     2] val loss: 0.646\n",
            "[49,     6] loss: 0.464\n",
            "[49,     2] val loss: 0.593\n",
            "[50,     6] loss: 0.463\n",
            "[50,     2] val loss: 0.671\n",
            "[51,     6] loss: 0.459\n",
            "[51,     2] val loss: 0.635\n",
            "[52,     6] loss: 0.455\n",
            "[52,     2] val loss: 0.590\n",
            "[53,     6] loss: 0.455\n",
            "[53,     2] val loss: 0.590\n",
            "[54,     6] loss: 0.454\n",
            "[54,     2] val loss: 0.543\n",
            "[55,     6] loss: 0.452\n",
            "[55,     2] val loss: 0.562\n",
            "[56,     6] loss: 0.448\n",
            "[56,     2] val loss: 0.509\n",
            "[57,     6] loss: 0.447\n",
            "[57,     2] val loss: 0.533\n",
            "[58,     6] loss: 0.446\n",
            "[58,     2] val loss: 0.676\n",
            "[59,     6] loss: 0.445\n",
            "[59,     2] val loss: 0.674\n",
            "[60,     6] loss: 0.441\n",
            "[60,     2] val loss: 0.553\n",
            "[61,     6] loss: 0.442\n",
            "[61,     2] val loss: 0.607\n",
            "[62,     6] loss: 0.440\n",
            "[62,     2] val loss: 0.572\n",
            "[63,     6] loss: 0.437\n",
            "[63,     2] val loss: 0.528\n",
            "[64,     6] loss: 0.435\n",
            "[64,     2] val loss: 0.711\n",
            "[65,     6] loss: 0.433\n",
            "[65,     2] val loss: 0.510\n",
            "[66,     6] loss: 0.435\n",
            "[66,     2] val loss: 0.628\n",
            "[67,     6] loss: 0.431\n",
            "[67,     2] val loss: 0.583\n",
            "[68,     6] loss: 0.428\n",
            "[68,     2] val loss: 0.582\n",
            "[69,     6] loss: 0.428\n",
            "[69,     2] val loss: 0.672\n",
            "[70,     6] loss: 0.426\n",
            "[70,     2] val loss: 0.564\n",
            "[71,     6] loss: 0.425\n",
            "[71,     2] val loss: 0.601\n",
            "[72,     6] loss: 0.423\n",
            "[72,     2] val loss: 0.581\n",
            "[73,     6] loss: 0.422\n",
            "[73,     2] val loss: 0.572\n",
            "[74,     6] loss: 0.420\n",
            "[74,     2] val loss: 0.542\n",
            "[75,     6] loss: 0.418\n",
            "[75,     2] val loss: 0.633\n",
            "[76,     6] loss: 0.417\n",
            "[76,     2] val loss: 0.587\n",
            "[77,     6] loss: 0.416\n",
            "[77,     2] val loss: 0.600\n",
            "[78,     6] loss: 0.415\n",
            "[78,     2] val loss: 0.653\n",
            "[79,     6] loss: 0.413\n",
            "[79,     2] val loss: 0.548\n",
            "[80,     6] loss: 0.409\n",
            "[80,     2] val loss: 0.531\n",
            "[81,     6] loss: 0.410\n",
            "[81,     2] val loss: 0.642\n",
            "[82,     6] loss: 0.410\n",
            "[82,     2] val loss: 0.553\n",
            "[83,     6] loss: 0.406\n",
            "[83,     2] val loss: 0.518\n",
            "[84,     6] loss: 0.406\n",
            "[84,     2] val loss: 0.532\n",
            "[85,     6] loss: 0.404\n",
            "[85,     2] val loss: 0.632\n",
            "[86,     6] loss: 0.401\n",
            "[86,     2] val loss: 0.580\n",
            "[87,     6] loss: 0.401\n",
            "[87,     2] val loss: 0.567\n",
            "[88,     6] loss: 0.402\n",
            "[88,     2] val loss: 0.528\n",
            "[89,     6] loss: 0.397\n",
            "[89,     2] val loss: 0.518\n",
            "[90,     6] loss: 0.397\n",
            "[90,     2] val loss: 0.578\n",
            "[91,     6] loss: 0.395\n",
            "[91,     2] val loss: 0.715\n",
            "[92,     6] loss: 0.394\n",
            "[92,     2] val loss: 0.568\n",
            "[93,     6] loss: 0.395\n",
            "[93,     2] val loss: 0.603\n",
            "[94,     6] loss: 0.391\n",
            "[94,     2] val loss: 0.522\n",
            "[95,     6] loss: 0.391\n",
            "[95,     2] val loss: 0.591\n",
            "[96,     6] loss: 0.390\n",
            "[96,     2] val loss: 0.540\n",
            "[97,     6] loss: 0.388\n",
            "[97,     2] val loss: 0.639\n",
            "[98,     6] loss: 0.387\n",
            "[98,     2] val loss: 0.606\n",
            "[99,     6] loss: 0.385\n",
            "[99,     2] val loss: 0.477\n",
            "[100,     6] loss: 0.387\n",
            "[100,     2] val loss: 0.561\n",
            "[101,     6] loss: 0.383\n",
            "[101,     2] val loss: 0.579\n",
            "[102,     6] loss: 0.382\n",
            "[102,     2] val loss: 0.578\n",
            "[103,     6] loss: 0.379\n",
            "[103,     2] val loss: 0.565\n",
            "[104,     6] loss: 0.379\n",
            "[104,     2] val loss: 0.595\n",
            "[105,     6] loss: 0.378\n",
            "[105,     2] val loss: 0.571\n",
            "[106,     6] loss: 0.375\n",
            "[106,     2] val loss: 0.608\n",
            "[107,     6] loss: 0.374\n",
            "[107,     2] val loss: 0.642\n",
            "[108,     6] loss: 0.375\n",
            "[108,     2] val loss: 0.593\n",
            "[109,     6] loss: 0.371\n",
            "[109,     2] val loss: 0.576\n",
            "[110,     6] loss: 0.371\n",
            "[110,     2] val loss: 0.595\n",
            "[111,     6] loss: 0.370\n",
            "[111,     2] val loss: 0.631\n",
            "[112,     6] loss: 0.369\n",
            "[112,     2] val loss: 0.535\n",
            "[113,     6] loss: 0.367\n",
            "[113,     2] val loss: 0.543\n",
            "[114,     6] loss: 0.367\n",
            "[114,     2] val loss: 0.555\n",
            "[115,     6] loss: 0.366\n",
            "[115,     2] val loss: 0.649\n",
            "[116,     6] loss: 0.362\n",
            "[116,     2] val loss: 0.528\n",
            "[117,     6] loss: 0.363\n",
            "[117,     2] val loss: 0.696\n",
            "[118,     6] loss: 0.361\n",
            "[118,     2] val loss: 0.710\n",
            "[119,     6] loss: 0.361\n",
            "[119,     2] val loss: 0.629\n",
            "[120,     6] loss: 0.358\n",
            "[120,     2] val loss: 0.623\n",
            "[121,     6] loss: 0.359\n",
            "[121,     2] val loss: 0.596\n",
            "[122,     6] loss: 0.356\n",
            "[122,     2] val loss: 0.588\n",
            "[123,     6] loss: 0.356\n",
            "[123,     2] val loss: 0.568\n",
            "[124,     6] loss: 0.354\n",
            "[124,     2] val loss: 0.524\n",
            "[125,     6] loss: 0.353\n",
            "[125,     2] val loss: 0.559\n",
            "[126,     6] loss: 0.353\n",
            "[126,     2] val loss: 0.558\n",
            "[127,     6] loss: 0.351\n",
            "[127,     2] val loss: 0.649\n",
            "[128,     6] loss: 0.351\n",
            "[128,     2] val loss: 0.571\n",
            "[129,     6] loss: 0.350\n",
            "[129,     2] val loss: 0.625\n",
            "[130,     6] loss: 0.347\n",
            "[130,     2] val loss: 0.658\n",
            "[131,     6] loss: 0.345\n",
            "[131,     2] val loss: 0.564\n",
            "[132,     6] loss: 0.349\n",
            "[132,     2] val loss: 0.597\n",
            "[133,     6] loss: 0.344\n",
            "[133,     2] val loss: 0.500\n",
            "[134,     6] loss: 0.342\n",
            "[134,     2] val loss: 0.618\n",
            "[135,     6] loss: 0.342\n",
            "[135,     2] val loss: 0.592\n",
            "[136,     6] loss: 0.341\n",
            "[136,     2] val loss: 0.588\n",
            "[137,     6] loss: 0.339\n",
            "[137,     2] val loss: 0.636\n",
            "[138,     6] loss: 0.339\n",
            "[138,     2] val loss: 0.586\n",
            "[139,     6] loss: 0.337\n",
            "[139,     2] val loss: 0.583\n",
            "[140,     6] loss: 0.336\n",
            "[140,     2] val loss: 0.690\n",
            "[141,     6] loss: 0.334\n",
            "[141,     2] val loss: 0.632\n",
            "[142,     6] loss: 0.335\n",
            "[142,     2] val loss: 0.526\n",
            "[143,     6] loss: 0.335\n",
            "[143,     2] val loss: 0.535\n",
            "[144,     6] loss: 0.331\n",
            "[144,     2] val loss: 0.562\n",
            "[145,     6] loss: 0.330\n",
            "[145,     2] val loss: 0.625\n",
            "[146,     6] loss: 0.330\n",
            "[146,     2] val loss: 0.546\n",
            "[147,     6] loss: 0.332\n",
            "[147,     2] val loss: 0.642\n",
            "[148,     6] loss: 0.328\n",
            "[148,     2] val loss: 0.609\n",
            "[149,     6] loss: 0.327\n",
            "[149,     2] val loss: 0.562\n",
            "[150,     6] loss: 0.326\n",
            "[150,     2] val loss: 0.590\n",
            "[151,     6] loss: 0.324\n",
            "[151,     2] val loss: 0.577\n",
            "[152,     6] loss: 0.325\n",
            "[152,     2] val loss: 0.588\n",
            "[153,     6] loss: 0.323\n",
            "[153,     2] val loss: 0.637\n",
            "[154,     6] loss: 0.322\n",
            "[154,     2] val loss: 0.555\n",
            "[155,     6] loss: 0.321\n",
            "[155,     2] val loss: 0.591\n",
            "[156,     6] loss: 0.320\n",
            "[156,     2] val loss: 0.722\n",
            "[157,     6] loss: 0.318\n",
            "[157,     2] val loss: 0.588\n",
            "[158,     6] loss: 0.318\n",
            "[158,     2] val loss: 0.564\n",
            "[159,     6] loss: 0.317\n",
            "[159,     2] val loss: 0.495\n",
            "[160,     6] loss: 0.315\n",
            "[160,     2] val loss: 0.523\n",
            "[161,     6] loss: 0.314\n",
            "[161,     2] val loss: 0.633\n",
            "[162,     6] loss: 0.314\n",
            "[162,     2] val loss: 0.637\n",
            "[163,     6] loss: 0.311\n",
            "[163,     2] val loss: 0.675\n",
            "[164,     6] loss: 0.311\n",
            "[164,     2] val loss: 0.626\n",
            "[165,     6] loss: 0.311\n",
            "[165,     2] val loss: 0.644\n",
            "[166,     6] loss: 0.309\n",
            "[166,     2] val loss: 0.540\n",
            "[167,     6] loss: 0.307\n",
            "[167,     2] val loss: 0.584\n",
            "[168,     6] loss: 0.308\n",
            "[168,     2] val loss: 0.613\n",
            "[169,     6] loss: 0.307\n",
            "[169,     2] val loss: 0.550\n",
            "[170,     6] loss: 0.307\n",
            "[170,     2] val loss: 0.574\n",
            "[171,     6] loss: 0.305\n",
            "[171,     2] val loss: 0.608\n",
            "[172,     6] loss: 0.304\n",
            "[172,     2] val loss: 0.451\n",
            "[173,     6] loss: 0.301\n",
            "[173,     2] val loss: 0.590\n",
            "[174,     6] loss: 0.302\n",
            "[174,     2] val loss: 0.626\n",
            "[175,     6] loss: 0.301\n",
            "[175,     2] val loss: 0.572\n",
            "[176,     6] loss: 0.301\n",
            "[176,     2] val loss: 0.511\n",
            "[177,     6] loss: 0.298\n",
            "[177,     2] val loss: 0.593\n",
            "[178,     6] loss: 0.297\n",
            "[178,     2] val loss: 0.603\n",
            "[179,     6] loss: 0.297\n",
            "[179,     2] val loss: 0.571\n",
            "[180,     6] loss: 0.295\n",
            "[180,     2] val loss: 0.576\n",
            "[181,     6] loss: 0.295\n",
            "[181,     2] val loss: 0.641\n",
            "[182,     6] loss: 0.293\n",
            "[182,     2] val loss: 0.650\n",
            "[183,     6] loss: 0.293\n",
            "[183,     2] val loss: 0.611\n",
            "[184,     6] loss: 0.294\n",
            "[184,     2] val loss: 0.715\n",
            "[185,     6] loss: 0.290\n",
            "[185,     2] val loss: 0.574\n",
            "[186,     6] loss: 0.290\n",
            "[186,     2] val loss: 0.610\n",
            "[187,     6] loss: 0.289\n",
            "[187,     2] val loss: 0.634\n",
            "[188,     6] loss: 0.287\n",
            "[188,     2] val loss: 0.698\n",
            "[189,     6] loss: 0.285\n",
            "[189,     2] val loss: 0.555\n",
            "[190,     6] loss: 0.287\n",
            "[190,     2] val loss: 0.608\n",
            "[191,     6] loss: 0.286\n",
            "[191,     2] val loss: 0.654\n",
            "[192,     6] loss: 0.285\n",
            "[192,     2] val loss: 0.582\n",
            "[193,     6] loss: 0.284\n",
            "[193,     2] val loss: 0.559\n",
            "[194,     6] loss: 0.282\n",
            "[194,     2] val loss: 0.675\n",
            "[195,     6] loss: 0.283\n",
            "[195,     2] val loss: 0.545\n",
            "[196,     6] loss: 0.279\n",
            "[196,     2] val loss: 0.578\n",
            "[197,     6] loss: 0.279\n",
            "[197,     2] val loss: 0.608\n",
            "[198,     6] loss: 0.278\n",
            "[198,     2] val loss: 0.601\n",
            "[199,     6] loss: 0.278\n",
            "[199,     2] val loss: 0.582\n",
            "[200,     6] loss: 0.277\n",
            "[200,     2] val loss: 0.613\n",
            "[201,     6] loss: 0.276\n",
            "[201,     2] val loss: 0.502\n",
            "[202,     6] loss: 0.274\n",
            "[202,     2] val loss: 0.579\n",
            "[203,     6] loss: 0.276\n",
            "[203,     2] val loss: 0.522\n",
            "[204,     6] loss: 0.273\n",
            "[204,     2] val loss: 0.624\n",
            "[205,     6] loss: 0.274\n",
            "[205,     2] val loss: 0.580\n",
            "[206,     6] loss: 0.272\n",
            "[206,     2] val loss: 0.476\n",
            "[207,     6] loss: 0.271\n",
            "[207,     2] val loss: 0.512\n",
            "[208,     6] loss: 0.270\n",
            "[208,     2] val loss: 0.569\n",
            "[209,     6] loss: 0.269\n",
            "[209,     2] val loss: 0.553\n",
            "[210,     6] loss: 0.267\n",
            "[210,     2] val loss: 0.633\n",
            "[211,     6] loss: 0.267\n",
            "[211,     2] val loss: 0.609\n",
            "[212,     6] loss: 0.266\n",
            "[212,     2] val loss: 0.744\n",
            "[213,     6] loss: 0.266\n",
            "[213,     2] val loss: 0.625\n",
            "[214,     6] loss: 0.264\n",
            "[214,     2] val loss: 0.524\n",
            "[215,     6] loss: 0.263\n",
            "[215,     2] val loss: 0.560\n",
            "[216,     6] loss: 0.264\n",
            "[216,     2] val loss: 0.620\n",
            "[217,     6] loss: 0.263\n",
            "[217,     2] val loss: 0.661\n",
            "[218,     6] loss: 0.262\n",
            "[218,     2] val loss: 0.574\n",
            "[219,     6] loss: 0.261\n",
            "[219,     2] val loss: 0.523\n",
            "[220,     6] loss: 0.261\n",
            "[220,     2] val loss: 0.580\n",
            "[221,     6] loss: 0.261\n",
            "[221,     2] val loss: 0.593\n",
            "[222,     6] loss: 0.257\n",
            "[222,     2] val loss: 0.515\n",
            "[223,     6] loss: 0.258\n",
            "[223,     2] val loss: 0.589\n",
            "[224,     6] loss: 0.257\n",
            "[224,     2] val loss: 0.540\n",
            "[225,     6] loss: 0.256\n",
            "[225,     2] val loss: 0.572\n",
            "[226,     6] loss: 0.255\n",
            "[226,     2] val loss: 0.601\n",
            "[227,     6] loss: 0.254\n",
            "[227,     2] val loss: 0.510\n",
            "[228,     6] loss: 0.254\n",
            "[228,     2] val loss: 0.552\n",
            "[229,     6] loss: 0.254\n",
            "[229,     2] val loss: 0.648\n",
            "[230,     6] loss: 0.252\n",
            "[230,     2] val loss: 0.647\n",
            "[231,     6] loss: 0.252\n",
            "[231,     2] val loss: 0.656\n",
            "[232,     6] loss: 0.252\n",
            "[232,     2] val loss: 0.557\n",
            "[233,     6] loss: 0.249\n",
            "[233,     2] val loss: 0.608\n",
            "[234,     6] loss: 0.250\n",
            "[234,     2] val loss: 0.583\n",
            "[235,     6] loss: 0.249\n",
            "[235,     2] val loss: 0.509\n",
            "[236,     6] loss: 0.247\n",
            "[236,     2] val loss: 0.669\n",
            "[237,     6] loss: 0.247\n",
            "[237,     2] val loss: 0.650\n",
            "[238,     6] loss: 0.246\n",
            "[238,     2] val loss: 0.640\n",
            "[239,     6] loss: 0.245\n",
            "[239,     2] val loss: 0.592\n",
            "[240,     6] loss: 0.244\n",
            "[240,     2] val loss: 0.622\n",
            "[241,     6] loss: 0.243\n",
            "[241,     2] val loss: 0.698\n",
            "[242,     6] loss: 0.243\n",
            "[242,     2] val loss: 0.519\n",
            "[243,     6] loss: 0.242\n",
            "[243,     2] val loss: 0.739\n",
            "[244,     6] loss: 0.243\n",
            "[244,     2] val loss: 0.634\n",
            "[245,     6] loss: 0.241\n",
            "[245,     2] val loss: 0.644\n",
            "[246,     6] loss: 0.241\n",
            "[246,     2] val loss: 0.707\n",
            "[247,     6] loss: 0.240\n",
            "[247,     2] val loss: 0.663\n",
            "[248,     6] loss: 0.239\n",
            "[248,     2] val loss: 0.576\n",
            "[249,     6] loss: 0.238\n",
            "[249,     2] val loss: 0.595\n",
            "[250,     6] loss: 0.237\n",
            "[250,     2] val loss: 0.677\n",
            "Обучение закончено\n"
          ]
        }
      ],
      "source": [
        "EPOCHS = 250\n",
        "steps_per_epoch = len(dataloader['train'])\n",
        "steps_per_epoch_val = len(dataloader['test'])\n",
        "last_loss = 5\n",
        "for epoch in range(EPOCHS):  # проход по набору данных несколько раз\n",
        "    running_loss = 0.0\n",
        "    model.train()\n",
        "    for i, batch in enumerate(dataloader['train'], 0):\n",
        "        # получение одного минибатча; batch это двуэлементный список из [inputs, labels]\n",
        "        inputs, labels = batch\n",
        "\n",
        "        # очищение прошлых градиентов с прошлой итерации\n",
        "        optimizer.zero_grad()\n",
        "\n",
        "        # прямой + обратный проходы + оптимизация\n",
        "        outputs = model(inputs)\n",
        "        loss = criterion(outputs, labels)\n",
        "        #loss = F.cross_entropy(outputs, labels)\n",
        "        loss.backward()\n",
        "        optimizer.step()\n",
        "\n",
        "        # для подсчёта статистик\n",
        "        running_loss += loss.item()\n",
        "    print(f'[{epoch + 1}, {i + 1:5d}] loss: {running_loss / steps_per_epoch:.3f}')\n",
        "    running_loss = 0.0\n",
        "    model.eval()\n",
        "    with torch.no_grad(): # отключение автоматического дифференцирования\n",
        "        for i, data in enumerate(dataloader['test'], 0):\n",
        "            inputs, labels = data\n",
        "\n",
        "            outputs = model(inputs)\n",
        "            loss = criterion(outputs, labels)\n",
        "            running_loss += loss.item()\n",
        "    print(f'[{epoch + 1}, {i + 1:5d}] val loss: {running_loss / steps_per_epoch_val:.3f}')\n",
        "    if last_loss + 0.1 < running_loss / steps_per_epoch_val:\n",
        "      print(\"Момент ранней остановки\")\n",
        "      break\n",
        "    last_loss = running_loss / steps_per_epoch_val\n",
        "print('Обучение закончено')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pM3jjyu2Z6cf"
      },
      "source": [
        "## Проверка качества модели по классам на обучающей и тестовой выборках"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5RlNWKIRM8Hj",
        "outputId": "fa4721be-ea59-4451-f82c-b6af45a2a34b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "train\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           5     0.9408    0.9540    0.9474       500\n",
            "          30     0.9155    0.9540    0.9344       500\n",
            "          55     0.9301    0.8780    0.9033       500\n",
            "\n",
            "    accuracy                         0.9287      1500\n",
            "   macro avg     0.9288    0.9287    0.9283      1500\n",
            "weighted avg     0.9288    0.9287    0.9283      1500\n",
            "\n",
            "--------------------------------------------------\n",
            "test\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           5     0.7477    0.8300    0.7867       100\n",
            "          30     0.7788    0.8100    0.7941       100\n",
            "          55     0.6941    0.5900    0.6378       100\n",
            "\n",
            "    accuracy                         0.7433       300\n",
            "   macro avg     0.7402    0.7433    0.7396       300\n",
            "weighted avg     0.7402    0.7433    0.7396       300\n",
            "\n",
            "--------------------------------------------------\n"
          ]
        }
      ],
      "source": [
        "for part in ['train', 'test']:\n",
        "    y_pred = []\n",
        "    y_true = []\n",
        "    with torch.no_grad(): # отключение автоматического дифференцирования\n",
        "        for i, data in enumerate(dataloader[part], 0):\n",
        "            inputs, labels = data\n",
        "\n",
        "            outputs = model(inputs).detach().numpy()\n",
        "            y_pred.append(outputs)\n",
        "            y_true.append(labels.numpy())\n",
        "        y_true = np.concatenate(y_true)\n",
        "        y_pred = np.concatenate(y_pred)\n",
        "        print(part)\n",
        "        print(classification_report(y_true.argmax(axis=-1), y_pred.argmax(axis=-1),\n",
        "                                    digits=4, target_names=list(map(str, CLASSES))))\n",
        "        print('-'*50)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Визуализация весов"
      ],
      "metadata": {
        "id": "rwf4xLEjnJ95"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "weights = list(model.parameters())[0].detach().numpy()\n",
        "print(weights.shape)\n",
        "fig, ax = plt.subplots(1, weights.shape[0], figsize=(3*weights.shape[0], 3))\n",
        "for i, ω in enumerate(weights):\n",
        "    ω = ω.reshape(32, 32, 3)\n",
        "    ω -= np.percentile(ω, 1, axis=[0, 1])\n",
        "    ω /= np.percentile(ω, 99, axis=[0, 1])\n",
        "    ω = np.clip(ω, 0, 1) \n",
        "    ax[i].imshow(ω)"
      ],
      "metadata": {
        "id": "yRxbB8D7nYaM",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 139
        },
        "outputId": "e879e3fb-d673-4645-b6ad-444d5bc22972"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(10, 3072)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2160x216 with 10 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Сохранение модели"
      ],
      "metadata": {
        "id": "m_J6Fxwf6tvK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# сохраниение модели\n",
        "# ПЕРВЫЙ СПОСОБ: сохранение параметров\n",
        "PATH = 'cifar_cnn.pth'\n",
        "torch.save(model.state_dict(), PATH)\n",
        "# загрузка\n",
        "new_model = Cifar100_MLP(hidden_size=HIDDEN_SIZE, classes=len(CLASSES))\n",
        "new_model.load_state_dict(torch.load(PATH))\n",
        "new_model.eval()\n",
        "\n",
        "# ВТОРОЙ СПОСОБ: сохранение всей архитектуры\n",
        "PATH2 = 'cifar_cnn.pt'\n",
        "torch.save(model, PATH2)\n",
        "# загрузка\n",
        "new_model_2 = torch.load(PATH2)\n",
        "new_model_2.eval()"
      ],
      "metadata": {
        "id": "npvBE5vj6vi7",
        "outputId": "8d56fba3-0f8a-4dc1-d603-dc4d0a040fe6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Cifar100_MLP(\n",
              "  (norm): Normalize()\n",
              "  (seq): Sequential(\n",
              "    (0): Linear(in_features=3072, out_features=10, bias=True)\n",
              "    (1): ReLU()\n",
              "    (2): Linear(in_features=10, out_features=3, bias=True)\n",
              "  )\n",
              ")"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# входной тензор для модели\n",
        "x = torch.randn(1, 32, 32, 3, requires_grad=True)\n",
        "torch_out = model(x)\n",
        "\n",
        "# экспорт модели\n",
        "torch.onnx.export(model,               # модель\n",
        "                  x,                   # входной тензор (или кортеж нескольких тензоров)\n",
        "                  \"cifar100_CNN.onnx\", # куда сохранить (либо путь к файлу либо fileObject)\n",
        "                  export_params=True,  # сохраняет веса обученных параметров внутри файла модели\n",
        "                  opset_version=9,     # версия ONNX\n",
        "                  do_constant_folding=True,  # следует ли выполнять укорачивание констант для оптимизации\n",
        "                  input_names = ['input'],   # имя входного слоя\n",
        "                  output_names = ['output'],  # имя выходного слоя\n",
        "                  dynamic_axes={'input' : {0 : 'batch_size'},    # динамичные оси, в данном случае только размер пакета\n",
        "                                'output' : {0 : 'batch_size'}})"
      ],
      "metadata": {
        "id": "_SF8Um938RhK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Описание методов библиотек"
      ],
      "metadata": {
        "id": "HFzEnQacoQwb"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Mv5qVoyxfoPZ"
      },
      "source": [
        "### Методы и функции NumPy:\n",
        "\n",
        "(Подробнее в документации https://numpy.org/doc/1.22/reference/index.html)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9aWaJ2_EfoPZ"
      },
      "source": [
        "* __np.array__ - создание массива из списка или другого массива\n",
        "* __np.shape__ - выводит размерность многомерного массива (т.е. для массива 2х2 будет выведен кортеж (2, 2))\n",
        "* __np.size__ - выводит число элементов в массиве (т.е. для массива 2х2 будет выведено число 4)\n",
        "* __np.uint8__, __np.int16__, __np.int64__, __np.float32__ - приведение массива к новому типу, при этом в памяти выделяется место под новый массив выбранного типа. Число после типа обозначет, сколько бит данных используется для хранения одного элемента массива. Для хранения картинок зачастую используется экономный uint8 - беззнаковый 8-битный целочисленный тип данных (диапазон чисел 0-255)\n",
        "* __np.ones__, __np.zeros__  - создание уже заполненных массивов либо единицами, либо нулями. В качестве аргумента передается список или кортеж с требуемой размерностью. Например `np.ones((10,))` создаст вектор из 10 единичек. А `np.zeros((32, 32, 3))` создаст двузмерный массив разрешением 32 на 32 пикселя с 3 каналами. На практике используется для проверки архитектуры модели в прямом направлении\n",
        "* __np.arange__ - создание уже заполненного массива в виде возрастающей арифметической прогресии от первого аргумента до второго аргумента не включительно с шагом, который задаётеся третьим аргументом. Первый и третий аргументы можно опускать, в таком случае получается компактная запись `np.arange(3)` => [0, 1, 2]\n",
        "* __np.repeat__ - дублирование элементов массива на количество, указанное первым аргументом. Таким образом, для массива `arr = [0, 1]` `arr.repeat(2)` вернёт [0, 0, 1, 1]\n",
        "* __np.exp__ - применение поэлементной операции потенциирования к массиву\n",
        "* __np.random.normal__ - генерация массива, заполненного случайными нормальными величинами со стандартным отклонением, задающимся через аргумент scale и со средним значением, равным аргументу mean. Число элементов в массиве задаётся числом или списком, переданным аргументу size.\n",
        "* __np.random.randint__ - генерация массива, заполненного случайными целыми числами в диапазоне, задающимся аналогично __np.arange__. Число элементов в массиве задаётся числом или списком, переданным аргументу size.\n",
        "* __np.reshape__  - буквально изменение размерности многомерного массива с учётом числа элементов. В качестве аргумента передается многомерный массив, а также список или кортеж с новой размерностью. Например `np.reshape([0, 1, 2, 3], (2,2))` создаст двухмерный массив размером 2х2. При этом в памяти новый массив не выделяется, а меняется лишь способ обхода по нему. Разрешается также и следующий способ вызова метода: `arr.reshape(2, 2)`. Обратите внимание на отсутствие дополнительных скобок. Если вместо конкретного числа подставить -1, то размерность будет подсчитана автоматически. На практике используется для выпрямление картинок в виде одномерного массива: `X.reshape(-1, 3072)`# [100, 32, 32, 3] -> [100, 3072]\n",
        "* __np.transpose__  - переименование осей многомерного массива. Для работы с изображениями принято два формата NHWC и NCHW (N - число картинок в массиве, C - число каналов, H - высота, W - ширина). В качестве аргумента передается многомерный массив, а также список или кортеж с новой расстановкой осей. Например `np.transpose([[0, 1, 2, 3]], (1,0))` создаст двухмерный вектор-столбец [[[0], [1], [2], [3]]. Заметьте, что отсчет осей начинается с 0. На практике используется для перевода NHWC в NCHW и обратно. В первом случае 0 ось N остаётся на своём первом месте, первая и вторая оси H и W сдвигаются на одну позицию вправо, а 3 ось - C ставится на второе место. Т.е. получим следующую перестановку: [0, 3, 1, 2] \n",
        "* __np.isin__ - аналог SQL оператора IN, поэлементная проверка вхождения массива в коллекцию. `np.isin([0, 2, 1], [2, 3])` вернёт [False, True, False]\n",
        "* __индексирование__ - выбор подмассива или среза массива осуществляется с помощью квадратных скобок []. Если `arr = np.array([2, 1, 0])`, то `arr[0]` вернёт первый элемент. `arr[[0, 1]]` - обращение по индексу, `arr[[True, False, True]]` - обращение по булевой маске. Заметьте, что обращение по индексу необязательно должно совпадать с размерностью массива, в отличие от обращения по маске. На практике удобно записывать значения маски в отдельную переменную. Для выбора конкретного столбца в многомерном массиве используется синтаксис срезов [:, k], где k - номер столбца. Если k равняется -1, то используется последний столбец или элемент. Так, например, для массива `arr = np.array([[0, 1], [2, 3], [4, 5])` выражение `arr[:, 0]` вернет массив [0, 2, 4]. Поскольку используется индекс срезов (стандартный синтаксис Python), то можно также выполнять срезы многомерных массивов. Для предыдущего примера `arr[1:2, 0:1]` вернёт [[2]]\n",
        "* __np.unique__ - аналог SELECT DISTINCT в SQL. При стандартных параметрах возвращает одномерный подмассив, содержащий уникальные элементы. Если указать выставить флаг __return_inverse__, то вернется массив с номерами отсчётов массива с уникальными элементами. По сути выполняется Label Encoding\n",
        "* __np.concatenate__ - конкатенация многомерного массива вдоль указанной оси. Номер оси указывается через аргумент __axis__. Например может быть использован для объединения нескольких признаков или нескольких наборов данных. В контексте изображений может использоваться для объединения или склейки нескольких изображений в одно как вертикально, так и горизонтально. В контексте звука - склеивание двух аудиодорожек.\n",
        "* __np.max__, __np.min__ - возвращает максимальный и минимальный элементы массива вдоль указанной оси, соответственно. Если номер оси не указан, то возвращается число. Номер оси указывается через аргумент __axis__. Если указывается -1, то полагается, что используется последний номер оси. Разрешается также и вызов функции в качестве метода многомерного массива: `arr.max()`\n",
        "* __np.argmax__ - возвращает индекс максимального элемента массива вдоль указанной оси. Если номер оси не указан, то возвращается первый индекс, соответвующих максимальному значению в массиве, т.е. одно число. Номер оси указывается через аргумент __axis__. Если указывается -1, то полагается, что используется последний номер оси. На практике используется для расчёта метрики доли правильных ответов модели (Accuracy). Разрешается также и вызов функции в качестве метода многомерного массива: `arr.argmax(axis=-1)`"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pL2CwPP4foPa"
      },
      "source": [
        "### Методы и функции Pickle\n",
        "(Документация: https://docs.python.org/3/library/pickle.html)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OCx3YmHafoPa"
      },
      "source": [
        "* __pickle.dump__ - сериализация структуры данных Python. Первым аргументом идёт сама структура, а вторым FileObject. При этом FileObject должен быть открыт в режиме записи байт (wb). Можно указать кодировку байт (big endian/ little endian). Тем самым можно хранить на постоянном носителе стандартные структуры данных, в том числе NumPy массивы.\n",
        "* __pickle.load__ - десериализация структуры данных Python. Первым аргументом идёт FileObject. При этом FileObject должен быть открыт в режиме чтения байт (rb). Можно указать кодировку байт (big endian/ little endian). Тем самым можно загружать ранее сохранённые структуры данных, что может быть полезно, если для их создания требуется длительное время (например, параметры модели глубокого обучения)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "QC12OZoxfoPa"
      },
      "source": [
        "### Методы и функции Sklearn\n",
        "(Документация: https://scikit-learn.org/stable/modules/classes.html)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "xIvGpvkYfoPb"
      },
      "source": [
        "* __datasets.make_circles__, __datasets.make_moons__ - генерация синтетической обучающей выборки для задачи классификации, возвращает X - двухмерный массив с числом примеров и числом признаков (признаков 2), а также одномерный массив с метками классов (0 или 1)\n",
        "\n",
        "* __metrics.classification_report__ - cоздает текстовый отчет, показывающий основные метрики классификации (доля правильных ответов, полнота, точность, f1-мера). В качестве первого аргумента передаются истинные метки класса, в качестве второго - метки класса, предсказанные моделью. Дополнительные полезные аргументы: digits - число выводимых знаков после запятой (по умолчанию 2), output_dict - возвращает словарь с расчитанными метриками вместо строки, sample_weight - расчитывает взвешенные метрики на основе веса каждого примера\n",
        "\n",
        "* __metrics.confusion_matrix__ - вычисляет матрицу ошибок модели для оценки точности классификации. Матрица ошибок идеальной модели имеет значения только на главной диагонали. Может быть использована для подсчёта всех классических метрик классификации (доля правильных ответов, полнота, точность, специфичность, f1-мера)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IHlZJ6u8foPb"
      },
      "source": [
        "### Методы и функции PIL\n",
        "\n",
        "(Документация: https://pillow.readthedocs.io/en/stable/)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LiZ6VpgQfoPb"
      },
      "source": [
        "* __Image.fromarray__ - cоздает объект Image на основе двухмерного массива или двухмерного массива с каналами. Часто ругается, если тип данных не uint8. Часто ругается, если производится попытка создать черно-белое изображения из картинки размерностью (W, H, 1). Для того, чтобы получить обратно массив из объекта Image, достаточно привести его к NumPy массиву, например np.array(img)\n",
        "\n",
        "* __Image.resize__ - меняет разрешение изображения с помощью интерполяции. Первым аргументом указывается список с новой шириной и высотой изображения. При желании можно указать тип интерполяции через аргумент resample. Поддерживаемые значения: PIL.Image.NEAREST, PIL.Image.BOX, PIL.Image.BILINEAR, PIL.Image.HAMMING, PIL.Image.BICUBIC, PIL.Image.LANCZOS. По умолчанию используется бикубическая интерполяция.\n",
        "\n",
        "* __Image.convert__ - переводит изображение из одной цветовой схемы в другую. Новая цветовая схема передается строкой, L - черно белая, LA - черно-белая с прозрачностью, RGB - стандартная цветовая схема с 3 каналами, RGBA - стандартная цветовая схема с 3 каналами цвета и одним каналом прозрачности, HSV - альтернативное цветовое представление и т.д.\n",
        "\n",
        "* __Image.open__ - считывает изображение по указанному пути в виде строки или FileObject. При создании набора данных может неправильно определить формат (например L вместо RGB), поэтому рекомендуется сразу после open приводить к нужному формату при помощи метода convert\n",
        "\n",
        "* __Image.save__ - сохраняет изображение по указанному пути в виде строки или FileObject. Если указывается FileObject, то нужно также указать формат изображения в аргументе format, например 'PNG' или 'JPEG'"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lbgjhQ_QfoPb"
      },
      "source": [
        "### Методы и функции Matplotlib\n",
        "\n",
        "(Документация: https://matplotlib.org/stable/api/index.html)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "WkICIncTfoPc"
      },
      "source": [
        "Принятые сокращения:\n",
        "* matplotlib.pyplot - plt\n",
        "\n",
        "Методы:\n",
        "* __plt.plot__ - рисует график по точкам и соединяет их линией. Первым аргументом передаются x-координаты, вторым - у-координаты. Если не передавать второй аргумент, х координаты будут приняты за у, а в качестве х будут использованы отсчёты массива. Дополнительные полезные аргументы: linestyle - тип отображаемой линиии ('--', '-', '-.' и т.д.), color - цвет линии ('k' - черный, 'r' - красный, 'white' - белый и т.д.), alpha - прозрачность линии, число от 0 (линия не видна) до 1 (нет прозрачности), label - текстовая метка данного графика.\n",
        "* __plt.scatter__ - рисует график по точкам юез соединения линиями. Первым аргументом передаются x-координаты, вторым - у-координаты. Если не передавать второй аргумент, х координаты будут приняты за у, а в качестве х будут использованы отсчёты массива. Дополнительные полезные аргументы: s - размер точек, color - цвет точек ('k' - черный, 'r' - красный, 'white' - белый и т.д.), alpha - прозрачность точек, число от 0 (линия не видна) до 1 (нет прозрачности), label - текстовая метка данного графика.\n",
        "* __plt.contourf__ - рисует заполненные контурные линии, разграничивающие границы.\n",
        "* __plt.show__ - принудительная отрисовка графика, может использоваться для вывода нескольких графиков в одном блоке кода.\n",
        "* __plt.legend__ - отображает ранее указанные метки графиков\n",
        "* __plt.xlim__ - ограничивает диапазон x-координат от первого до второго аргумента. По умолчанию диапазон горизонтальной оси подбирается автоматически на основе используемых данных. Для задания диапозана значений горизонтальной оси вручную и используется данный метод\n",
        "* __plt.ylim__ - аналогично __plt.xlim__, но для вертикальнйо оси.\n",
        "\n",
        "\n",
        "\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [
        "VrOocc6D_O7M",
        "CTpTR1x0YYdn",
        "qq1r9u6hSucR",
        "OF4X4J8_YlLo",
        "4zoT9OgeY7cZ",
        "HFzEnQacoQwb"
      ],
      "name": "Lab1.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}